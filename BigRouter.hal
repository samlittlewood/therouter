
# Using LinuxCNC version:  2.8
#

loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS
loadrt hostmot2
loadrt hm2_rpspi config="num_encoders=2 num_pwmgens=2 num_stepgens=4 num_leds=4 num_uarts=2" 
setp   [HMOT](CARD0).pwmgen.pwm_frequency 20000
setp   [HMOT](CARD0).pwmgen.pdm_frequency 6000000
#setp   [HMOT](CARD0).watchdog.timeout_ns 5000000
#loadrt pid names=pid.x,pid.y1,pid.y2,pid.z
loadrt estop_latch
loadrt debounce cfg=2
loadrt or2 count=1

addf debounce.0               base-thread
addf or2.0 		      base-thread

addf [HMOT](CARD0).read       servo-thread
addf motion-command-handler   servo-thread
addf estop-latch.0            servo-thread
addf motion-controller        servo-thread
#addf pid.x.do-pid-calcs      servo-thread
#addf pid.y1.do-pid-calcs     servo-thread
#addf pid.y2.do-pid-calcs     servo-thread
#addf pid.z.do-pid-calcs      servo-thread
#addf pid.s.do-pid-calcs      servo-thread
addf [HMOT](CARD0).write      servo-thread


# external output signals

# Enable 0
setp [HMOT](CARD0).gpio.001.invert_output FALSE
setp [HMOT](CARD0).gpio.001.is_output     TRUE
# Common enable for all steppers
net x-enable => [HMOT](CARD0).gpio.001.out

# Relay 0
setp [HMOT](CARD0).gpio.007.invert_output     FALSE
setp [HMOT](CARD0).gpio.007.is_output         TRUE

# Enable 1
setp [HMOT](CARD0).gpio.020.invert_output     FALSE
setp [HMOT](CARD0).gpio.020.is_output         TRUE

# Relay 1
setp [HMOT](CARD0).gpio.026.invert_output     FALSE
setp [HMOT](CARD0).gpio.026.is_output         TRUE

# external input signals

# Limits
net min-home-x  <=  [HMOT](CARD0).gpio.003.in_not
net max-x       <=  [HMOT](CARD0).gpio.016.in_not
net min-home-y1 <=  [HMOT](CARD0).gpio.015.in_not
net max-y1      <=  [HMOT](CARD0).gpio.014.in_not
net min-home-y2 <=  [HMOT](CARD0).gpio.013.in_not
net max-home-z  <=  [HMOT](CARD0).gpio.022.in_not

# Probes
net probe-in  <=  [HMOT](CARD0).gpio.032.in
net tool-in  <=  [HMOT](CARD0).gpio.034.in

setp debounce.0.delay 50
net probe-in => debounce.0.0.in
net probe-filt <= debounce.0.0.out

net tool-in => debounce.0.1.in
net tool-filt <= debounce.0.1.out

net probe-filt => or2.0.in0
net tool-filt => or2.0.in1
net tool-probe-filt <= or2.0.out

#*******************
#  AXIS X JOINT 0
#*******************

#setp   pid.x.Pgain     [JOINT_0]P
#setp   pid.x.Igain     [JOINT_0]I
#setp   pid.x.Dgain     [JOINT_0]D
#setp   pid.x.bias      [JOINT_0]BIAS
#setp   pid.x.FF0       [JOINT_0]FF0
#setp   pid.x.FF1       [JOINT_0]FF1
#setp   pid.x.FF2       [JOINT_0]FF2
#setp   pid.x.deadband  [JOINT_0]DEADBAND
#setp   pid.x.maxoutput [JOINT_0]MAX_OUTPUT
#setp   pid.x.error-previous-target true
# This setting is to limit bogus stepgen
# velocity corrections caused by position
# feedback sample time jitter.
#setp   pid.x.maxerror 0.012700

#net x-index-enable  <=> pid.x.index-enable
#net x-enable        =>  pid.x.enable
#net x-pos-cmd       =>  pid.x.command
#net x-pos-fb        =>  pid.x.feedback
#net x-output        <=  pid.x.output

# Step Gen signals/setup

setp   [HMOT](CARD0).stepgen.00.step_type        0
setp   [HMOT](CARD0).stepgen.00.control-type     0
setp   [HMOT](CARD0).stepgen.00.dirsetup        [JOINT_0]DIRSETUP
setp   [HMOT](CARD0).stepgen.00.dirhold         [JOINT_0]DIRHOLD
setp   [HMOT](CARD0).stepgen.00.steplen         [JOINT_0]STEPLEN
setp   [HMOT](CARD0).stepgen.00.stepspace       [JOINT_0]STEPSPACE
setp   [HMOT](CARD0).stepgen.00.position-scale  [JOINT_0]STEP_SCALE
setp   [HMOT](CARD0).stepgen.00.maxaccel        [JOINT_0]STEPGEN_MAXACCEL
setp   [HMOT](CARD0).stepgen.00.maxvel          [JOINT_0]STEPGEN_MAXVEL
setp   [HMOT](CARD0).stepgen.00.step.invert_output 1

# ---closedloop stepper signals---

net x-pos-cmd    <= joint.0.motor-pos-cmd
net x-vel-cmd    <= joint.0.vel-cmd
#net x-output     <= [HMOT](CARD0).stepgen.00.velocity-cmd
net x-pos-cmd     <= [HMOT](CARD0).stepgen.00.position-cmd
net x-pos-fb     <= [HMOT](CARD0).stepgen.00.position-fb
net x-pos-fb     => joint.0.motor-pos-fb
net x-enable     <= joint.0.amp-enable-out
net x-enable     => [HMOT](CARD0).stepgen.00.enable

# ---setup home / limit switch signals---

net min-home-x => joint.0.home-sw-in
net min-home-x => joint.0.neg-lim-sw-in
net max-x      => joint.0.pos-lim-sw-in

#*******************
#  AXIS Y1 JOINT 1
#*******************

#setp   pid.y1.Pgain     [JOINT_1]P
#setp   pid.y1.Igain     [JOINT_1]I
#setp   pid.y1.Dgain     [JOINT_1]D
#setp   pid.y1.bias      [JOINT_1]BIAS
#setp   pid.y1.FF0       [JOINT_1]FF0
#setp   pid.y1.FF1       [JOINT_1]FF1
#setp   pid.y1.FF2       [JOINT_1]FF2
#setp   pid.y1.deadband  [JOINT_1]DEADBAND
#setp   pid.y1.maxoutput [JOINT_1]MAX_OUTPUT
#setp   pid.y1.error-previous-target true
# This setting is to limit bogus stepgen
# velocity corrections caused by position
# feedback sample time jitter.
#setp   pid.y1.maxerror 0.012700

#net y1-index-enable  <=> pid.y1.index-enable
#net y1-enable        =>  pid.y1.enable
#net y1-pos-cmd       =>  pid.y1.command
#net y1-pos-fb        =>  pid.y1.feedback
#net y1-output        <=  pid.y1.output

# Step Gen signals/setup

setp   [HMOT](CARD0).stepgen.01.step_type        0
setp   [HMOT](CARD0).stepgen.01.control-type     0
setp   [HMOT](CARD0).stepgen.01.dirsetup        [JOINT_1]DIRSETUP
setp   [HMOT](CARD0).stepgen.01.dirhold         [JOINT_1]DIRHOLD
setp   [HMOT](CARD0).stepgen.01.steplen         [JOINT_1]STEPLEN
setp   [HMOT](CARD0).stepgen.01.stepspace       [JOINT_1]STEPSPACE
setp   [HMOT](CARD0).stepgen.01.position-scale  [JOINT_1]STEP_SCALE
setp   [HMOT](CARD0).stepgen.01.maxaccel        [JOINT_1]STEPGEN_MAXACCEL
setp   [HMOT](CARD0).stepgen.01.maxvel          [JOINT_1]STEPGEN_MAXVEL
setp   [HMOT](CARD0).stepgen.01.direction.invert_output 1
setp   [HMOT](CARD0).stepgen.01.step.invert_output 1

# ---closedloop stepper signals---

net y1-pos-cmd    <= joint.1.motor-pos-cmd
net y1-vel-cmd    <= joint.1.vel-cmd
#net y1-output     <= [HMOT](CARD0).stepgen.01.velocity-cmd
net y1-pos-cmd     <= [HMOT](CARD0).stepgen.01.position-cmd
net y1-pos-fb     <= [HMOT](CARD0).stepgen.01.position-fb
net y1-pos-fb     => joint.1.motor-pos-fb
net y1-enable     <= joint.1.amp-enable-out
net y1-enable     => [HMOT](CARD0).stepgen.01.enable

# ---setup home / limit switch signals---

net min-home-y1 => joint.1.home-sw-in
net min-home-y1 => joint.1.neg-lim-sw-in
net max-y1      => joint.1.pos-lim-sw-in

#*******************
#  AXIS Y2 JOINT 2
#*******************

#setp   pid.y2.Pgain     [JOINT_2]P
#setp   pid.y2.Igain     [JOINT_2]I
#setp   pid.y2.Dgain     [JOINT_2]D
#setp   pid.y2.bias      [JOINT_2]BIAS
#setp   pid.y2.FF0       [JOINT_2]FF0
#setp   pid.y2.FF1       [JOINT_2]FF1
#setp   pid.y2.FF2       [JOINT_2]FF2
#setp   pid.y2.deadband  [JOINT_2]DEADBAND
#setp   pid.y2.maxoutput [JOINT_2]MAX_OUTPUT
#setp   pid.y2.error-previous-target true
# This setting is to limit bogus stepgen
# velocity corrections caused by position
# feedback sample time jitter.
#setp   pid.y2.maxerror 0.012700

#net y2-index-enable  <=> pid.y2.index-enable
#net y2-enable        =>  pid.y2.enable
#net y2-pos-cmd       =>  pid.y2.command
#net y2-pos-fb        =>  pid.y2.feedback
#net y2-output        <=  pid.y2.output

# Step Gen signals/setup for tandem axis

setp   [HMOT](CARD0).stepgen.02.step_type        0
setp   [HMOT](CARD0).stepgen.02.control-type     0
setp   [HMOT](CARD0).stepgen.02.dirsetup        [JOINT_2]DIRSETUP
setp   [HMOT](CARD0).stepgen.02.dirhold         [JOINT_2]DIRHOLD
setp   [HMOT](CARD0).stepgen.02.steplen         [JOINT_2]STEPLEN
setp   [HMOT](CARD0).stepgen.02.stepspace       [JOINT_2]STEPSPACE
setp   [HMOT](CARD0).stepgen.02.position-scale  [JOINT_2]STEP_SCALE
setp   [HMOT](CARD0).stepgen.02.maxaccel        [JOINT_2]STEPGEN_MAXACCEL
setp   [HMOT](CARD0).stepgen.02.maxvel          [JOINT_2]STEPGEN_MAXVEL
setp   [HMOT](CARD0).stepgen.02.step.invert_output 1

# ---closedloop stepper signals---

net y2-pos-cmd    <= joint.2.motor-pos-cmd
net y2-vel-cmd    <= joint.2.vel-cmd
#net y2-output     <= [HMOT](CARD0).stepgen.02.velocity-cmd
net y2-pos-cmd     <= [HMOT](CARD0).stepgen.02.position-cmd
net y2-pos-fb     <= [HMOT](CARD0).stepgen.02.position-fb
net y2-pos-fb     => joint.2.motor-pos-fb
net y2-enable     <= joint.2.amp-enable-out
net y2-enable     => [HMOT](CARD0).stepgen.02.enable

# ---setup home / limit switch signals---

net min-home-y2   => joint.2.home-sw-in
net min-home-y2   => joint.2.neg-lim-sw-in

#*******************
#  AXIS Z JOINT 3
#*******************

#setp   pid.z.Pgain     [JOINT_3]P
#setp   pid.z.Igain     [JOINT_3]I
#setp   pid.z.Dgain     [JOINT_3]D
#setp   pid.z.bias      [JOINT_3]BIAS
#setp   pid.z.FF0       [JOINT_3]FF0
#setp   pid.z.FF1       [JOINT_3]FF1
#setp   pid.z.FF2       [JOINT_3]FF2
#setp   pid.z.deadband  [JOINT_3]DEADBAND
#setp   pid.z.maxoutput [JOINT_3]MAX_OUTPUT
#setp   pid.z.error-previous-target true
# This setting is to limit bogus stepgen
# velocity corrections caused by position
# feedback sample time jitter.
#setp   pid.z.maxerror 0.012700

#net z-index-enable  <=> pid.z.index-enable
#net z-enable        =>  pid.z.enable
#net z-pos-cmd       =>  pid.z.command
#net z-pos-fb        =>  pid.z.feedback
#net z-output        <=  pid.z.output

# Step Gen signals/setup

setp   [HMOT](CARD0).stepgen.03.step_type        0
setp   [HMOT](CARD0).stepgen.03.control-type     0
setp   [HMOT](CARD0).stepgen.03.dirsetup        [JOINT_3]DIRSETUP
setp   [HMOT](CARD0).stepgen.03.dirhold         [JOINT_3]DIRHOLD
setp   [HMOT](CARD0).stepgen.03.steplen         [JOINT_3]STEPLEN
setp   [HMOT](CARD0).stepgen.03.stepspace       [JOINT_3]STEPSPACE
setp   [HMOT](CARD0).stepgen.03.position-scale  [JOINT_3]STEP_SCALE
setp   [HMOT](CARD0).stepgen.03.maxaccel        [JOINT_3]STEPGEN_MAXACCEL
setp   [HMOT](CARD0).stepgen.03.maxvel          [JOINT_3]STEPGEN_MAXVEL
setp   [HMOT](CARD0).stepgen.03.direction.invert_output 1
setp   [HMOT](CARD0).stepgen.03.step.invert_output 1

# ---closedloop stepper signals---

net z-pos-cmd    <= joint.3.motor-pos-cmd
net z-vel-cmd    <= joint.3.vel-cmd
#net z-output     <= [HMOT](CARD0).stepgen.03.velocity-cmd
net z-pos-cmd     <= [HMOT](CARD0).stepgen.03.position-cmd
net z-pos-fb     <= [HMOT](CARD0).stepgen.03.position-fb
net z-pos-fb     => joint.3.motor-pos-fb
net z-enable     <= joint.3.amp-enable-out
net z-enable     => [HMOT](CARD0).stepgen.03.enable

# ---setup home / limit switch signals---

net max-home-z => joint.3.home-sw-in
net max-home-z => joint.3.pos-lim-sw-in

#*******************
#  SPINDLE
#*******************

# ---PWM Generator signals/setup---

#setp   [HMOT](CARD0).pwmgen.00.output-type 1
#setp   [HMOT](CARD0).pwmgen.00.scale  [SPINDLE_0]OUTPUT_SCALE
#setp   [HMOT](CARD0).pwmgen.pwm_frequency  1000

#net spindle-vel-cmd-rpm     => [HMOT](CARD0).pwmgen.00.value
#net spindle-enable      => [HMOT](CARD0).pwmgen.00.enable
#net spindle-enable      => [HMOT](CARD0).gpio.007.out

# ---setup spindle control signals---

net spindle-vel-cmd-rps        <=  spindle.0.speed-out-rps
net spindle-vel-cmd-rps-abs    <=  spindle.0.speed-out-rps-abs
net spindle-vel-cmd-rpm        <=  spindle.0.speed-out
net spindle-vel-cmd-rpm-abs    <=  spindle.0.speed-out-abs
net spindle-enable             <=  spindle.0.on
net spindle-cw                 <=  spindle.0.forward
net spindle-ccw                <=  spindle.0.reverse
net spindle-brake              <=  spindle.0.brake
net spindle-revs               =>  spindle.0.revs
net spindle-at-speed           =>  spindle.0.at-speed
net spindle-vel-fb-rps         =>  spindle.0.speed-in
net spindle-index-enable      <=>  spindle.0.index-enable

# ---Setup spindle at speed signals---
#sets spindle-at-speed true

#******************************
# connect miscellaneous signals
#******************************

#  ---HALUI signals---

net axis-select-x         halui.axis.x.select
net jog-x-pos             halui.axis.x.plus
net jog-x-neg             halui.axis.x.minus
net jog-x-analog          halui.axis.x.analog
net x-is-homed            halui.joint.0.is-homed
net axis-select-y         halui.axis.y.select
net jog-y-pos             halui.axis.y.plus
net jog-y-neg             halui.axis.y.minus
net jog-y-analog          halui.axis.y.analog
net y-is-homed            halui.joint.1.is-homed
net axis-select-z         halui.axis.z.select
net jog-z-pos             halui.axis.z.plus
net jog-z-neg             halui.axis.z.minus
net jog-z-analog          halui.axis.z.analog
net z-is-homed	          halui.joint.2.is-homed
net jog-selected-pos      halui.axis.selected.plus
net jog-selected-neg      halui.axis.selected.minus
net spindle-manual-cw     halui.spindle.0.forward
net spindle-manual-ccw    halui.spindle.0.reverse
#net spindle-manual-stop   halui.spindle.0.stop
net machine-is-on         halui.machine.is-on
net jog-speed             halui.axis.jog-speed
net MDI-mode              halui.mode.is-mdi

#  ---coolant signals---

net coolant-mist      <=  iocontrol.0.coolant-mist
net coolant-flood     <=  iocontrol.0.coolant-flood

#  ---probe signal---

net tool-probe-filt     =>  motion.probe-input

#  ---motion control signals---

net in-position               <=  motion.in-position
net machine-is-enabled        <=  motion.motion-enabled

#  ---digital in / out signals---

#  ---estop signals---

net estop-loopout iocontrol.0.emc-enable-in <= estop-latch.0.ok-out
net estop-loopin iocontrol.0.user-enable-out => estop-latch.0.ok-in
net estop-reset iocontrol.0.user-request-enable => estop-latch.0.reset
net remote-estop estop-latch.0.fault-in <=  [HMOT](CARD0).gpio.033.in

#  ---manual tool change signals---

#loadusr -W hal_manualtoolchange
#net tool-change-request     iocontrol.0.tool-change       =>  hal_manualtoolchange.change
#net tool-change-confirmed   iocontrol.0.tool-changed      <=  hal_manualtoolchange.changed
#net tool-number             iocontrol.0.tool-prep-number  =>  hal_manualtoolchange.number
#net tool-prepare-loopback   iocontrol.0.tool-prepare      =>  iocontrol.0.tool-prepared
